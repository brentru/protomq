// source: wippersnapper/servo/v1/servo.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb from 'google-protobuf'
var goog = jspb;
var global = Function('return this')();

import nanopb_nanopb_pb from './nanopb_pb.js'
goog.object.extend(proto, nanopb_nanopb_pb);
goog.exportSymbol('proto.wippersnapper.servo.v1.ServoAttachRequest', null, global);
goog.exportSymbol('proto.wippersnapper.servo.v1.ServoAttachResponse', null, global);
goog.exportSymbol('proto.wippersnapper.servo.v1.ServoDetachRequest', null, global);
goog.exportSymbol('proto.wippersnapper.servo.v1.ServoWriteRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.servo.v1.ServoAttachRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.servo.v1.ServoAttachRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.servo.v1.ServoAttachRequest.displayName = 'proto.wippersnapper.servo.v1.ServoAttachRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.servo.v1.ServoAttachResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.servo.v1.ServoAttachResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.servo.v1.ServoAttachResponse.displayName = 'proto.wippersnapper.servo.v1.ServoAttachResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.servo.v1.ServoDetachRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.servo.v1.ServoDetachRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.servo.v1.ServoDetachRequest.displayName = 'proto.wippersnapper.servo.v1.ServoDetachRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.servo.v1.ServoWriteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.servo.v1.ServoWriteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.servo.v1.ServoWriteRequest.displayName = 'proto.wippersnapper.servo.v1.ServoWriteRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.servo.v1.ServoAttachRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.servo.v1.ServoAttachRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servoPin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    servoFreq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minPulseWidth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxPulseWidth: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.servo.v1.ServoAttachRequest;
  return proto.wippersnapper.servo.v1.ServoAttachRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.servo.v1.ServoAttachRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServoPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServoFreq(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinPulseWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxPulseWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.servo.v1.ServoAttachRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.servo.v1.ServoAttachRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServoPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServoFreq();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMinPulseWidth();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxPulseWidth();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string servo_pin = 1;
 * @return {string}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.getServoPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.setServoPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 servo_freq = 2;
 * @return {number}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.getServoFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.setServoFreq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 min_pulse_width = 3;
 * @return {number}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.getMinPulseWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.setMinPulseWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 max_pulse_width = 4;
 * @return {number}
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.getMaxPulseWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachRequest.prototype.setMaxPulseWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.servo.v1.ServoAttachResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.servo.v1.ServoAttachResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    attachSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    servoPin: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.servo.v1.ServoAttachResponse}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.servo.v1.ServoAttachResponse;
  return proto.wippersnapper.servo.v1.ServoAttachResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.servo.v1.ServoAttachResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.servo.v1.ServoAttachResponse}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAttachSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServoPin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.servo.v1.ServoAttachResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.servo.v1.ServoAttachResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttachSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServoPin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool attach_success = 1;
 * @return {boolean}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.getAttachSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachResponse} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.setAttachSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string servo_pin = 2;
 * @return {string}
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.getServoPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.servo.v1.ServoAttachResponse} returns this
 */
proto.wippersnapper.servo.v1.ServoAttachResponse.prototype.setServoPin = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.servo.v1.ServoDetachRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.servo.v1.ServoDetachRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servoPin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.servo.v1.ServoDetachRequest}
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.servo.v1.ServoDetachRequest;
  return proto.wippersnapper.servo.v1.ServoDetachRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.servo.v1.ServoDetachRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.servo.v1.ServoDetachRequest}
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServoPin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.servo.v1.ServoDetachRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.servo.v1.ServoDetachRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServoPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string servo_pin = 1;
 * @return {string}
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.prototype.getServoPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.servo.v1.ServoDetachRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoDetachRequest.prototype.setServoPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.servo.v1.ServoWriteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.servo.v1.ServoWriteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servoPin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pulseWidth: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.servo.v1.ServoWriteRequest}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.servo.v1.ServoWriteRequest;
  return proto.wippersnapper.servo.v1.ServoWriteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.servo.v1.ServoWriteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.servo.v1.ServoWriteRequest}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServoPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPulseWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.servo.v1.ServoWriteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.servo.v1.ServoWriteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServoPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPulseWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string servo_pin = 1;
 * @return {string}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.getServoPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.servo.v1.ServoWriteRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.setServoPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pulse_width = 2;
 * @return {number}
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.getPulseWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.servo.v1.ServoWriteRequest} returns this
 */
proto.wippersnapper.servo.v1.ServoWriteRequest.prototype.setPulseWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


export default proto.wippersnapper.servo.v1
