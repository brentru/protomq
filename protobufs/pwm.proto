// SPDX-FileCopyrightText: 2022-2023 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";
package wippersnapper.pwm;

/**
* PWMAdd represents a  to a device to attach/allocate a PWM pin.
* On ESP32 Arduino, this will "attach" a pin to a LEDC channel/timer group.
* On non-ESP32 Arduino, this does nothing.
*/
message PWMAdd {
  string pin       = 1; /** The pin to be attached. */
  int32 frequency  = 2; /** PWM frequency of an analog pin, in Hz. **/
  int32 resolution = 3; /** The resolution of an analog pin, in bits. **/
}

/**
* PWMAdded represents a response from a device's execution of an
* Add message.
*/
message PWMAdded {
  string pin      = 1; /** The ed pin. */
  bool did_attach = 2; /** True if Add successful, False otherwise. */
}

/**
* PWMRemove represents a  to stop PWM'ing and release the pin for re-use.
* On ESP32, this will "detach" a pin from a LEDC channel/timer group.
* On non-ESP32 Arduino, this calls digitalWrite(LOW) on the pin
*/
message PWMRemove {
  string pin       = 1; /** The PWM pin to de-initialized. */
}

/**
* PWMWriteDutyCycle represents a  to write a duty cycle to a pin with a frequency (fixed).
* This is used for controlling LEDs.
*/
message PWMWriteDutyCycle {
  string pin       = 1; /** The pin to write to. */
  int32 duty_cycle = 2; /** The desired duty cycle to write (range is from 0 to (2 ** duty_resolution)).
                            This value will be changed by the slider on Adafruit IO. **/
}

/**
* PWMWriteDutyCycleMulti represents a wrapper  to write duty cycles to multiple pins.
* This is used for controlling RGB/RGBW LEDs.
*/
message PWMWriteDutyCycleMulti {
  repeated PWMWriteDutyCycle write_duty_cycle_reqs = 1; /** Multiple duty cycles to write, one per pin of a RGB LED. **/
}

/**
* PWMWriteFrequency represents a  to write a Frequency, in Hz, to a pin with a duty cycle of 50%.
* This is used for playing tones using a piezo buzzer or speaker.
*/
message PWMWriteFrequency {
  string pin       = 1; /** The pin to write to. */
  int32 frequency  = 2; /** The desired PWM frequency, in Hz. This value will be changed by the slider on Adafruit IO. **/
}