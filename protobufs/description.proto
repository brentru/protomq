// SPDX-FileCopyrightText: 2020-2023 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
// Messages for describing hardware over the description topic
syntax = "proto3";
package wippersnapper.description;

/**
* CreateDescriptionRequest identifies a device with Adafruit.io WipperSnapper.
*/
message CreateDescriptionRequest {
  string str_version     = 1; /** Library version, as a string */
}

// TODO: Consider dropping this, and compiling these as a header file (per-board) from the
// JSON if it is possible to do so.

// This is handled within decodeRegistrationResp(). We would like to drop it completely.
// TODO: Try the new esp32 function sto detect totoal gpio, analog and reference
// If that works, we can try to remove WipperSnapper_Register.cpp entirely and use the esp32 func
// to detect on ESP32 platforms, otherwise add these values into _Boards.h
/**
* CreateDescription represents a device's specifications.
*/
message CreateDescription {
  Response response        = 1; /** Specifies if the hardware definition exists on the server. */
  int32 total_gpio_pins    = 2; /** Specifies the number of GPIO pins on the device. */
  int32 total_analog_pins  = 3; /** Specifies the number of analog pins on the device. */
  float reference_voltage  = 4; /** Specifies the hardware's default reference voltage. */
  int32 total_i2c_ports    = 5; /** Specifies the number of hardware's I2C ports (i2cPorts[]). */

  /**
   * Response. Specifies if the hardware definiton is within the database.
   */
  enum Response {
    RESPONSE_UNSPECIFIED     = 0; /** Invalid response from server */
    RESPONSE_OK              = 1; /** Board found within definition index */
    RESPONSE_BOARD_NOT_FOUND = 2; /** Board not found in definition index */
  }
}

/**
* RegistrationComplete Specifies if the device finished configuring
* its components and is ready for configuration messages.
*/
message RegistrationComplete {
  bool is_complete = 1; /** Did the device successfully configure its components? */
}
