// SPDX-FileCopyrightText: 2022 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
// WipperSnapper's Protobuf communication API for DS18X20 Maxim Temperature ICs

syntax = "proto3";

package wippersnapper.ds18x20.v1;
// import "nanopb\.proto";
import "i2c.proto";

/**
* Ds18x20InitRequest represents a request to initialize
* a DS18X20 Maxim temperature sensor, from the broker.
* NOTE: This API only supports ONE DS18X20 device PER OneWire bus.
*/
message Ds18x20InitRequest {
  string onewire_pin                                                             = 1 [(nanopb).max_size = 5]; /** The desired pin to use as a OneWire bus. */
  int32  sensor_resolution                                                       = 2; /** The desired sensor resolution (9, 10, 11, or 12 bits). */
  repeated wippersnapper.i2c.v1.I2CDeviceSensorProperties i2c_device_properties  = 3[(nanopb).max_count = 2]; /** Properties for the DS18x20 sensor. */
}

/**
* ds18x20InitDs18x20InitResponseResponse represents a device's response
* to a ds18x20InitRequest message.
*/
message Ds18x20InitResponse {
  bool is_initialized  = 1; /** True if the 1-wire bus has been initialized successfully, False otherwise. */
  string onewire_pin   = 2 [(nanopb).max_size = 5]; /** The pin being used as a OneWire bus. */
}

/**
* Ds18x20DeInitRequest represents a request to de-initialize a DS18X20
* Maxim temperature sensor, from the broker.
*/
message Ds18x20DeInitRequest {
  string onewire_pin  = 1 [(nanopb).max_size = 5]; /** The desired onewire bus to de-initialize a DS18x sensor on and release. */
}

/**
* Ds18x20DeviceEvent event represents data from **one** DS18X20 sensor.
*/
message Ds18x20DeviceEvent {
  string onewire_pin                                      = 1 [(nanopb).max_size = 5]; /** The desired pin to use as a OneWire bus. */
  repeated wippersnapper.i2c.v1.SensorEvent sensor_event  = 2 [(nanopb).max_count = 2]; /** The DS18X20's SensorEvent. */
}
