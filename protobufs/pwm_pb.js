// source: wippersnapper/pwm/v1/pwm.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb from 'google-protobuf'
var goog = jspb;
var global = Function('return this')();

import nanopb_nanopb_pb from './nanopb_pb.js'
goog.object.extend(proto, nanopb_nanopb_pb);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMAttachRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMAttachResponse', null, global);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMDetachRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMAttachRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMAttachRequest.displayName = 'proto.wippersnapper.pwm.v1.PWMAttachRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMAttachResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMAttachResponse.displayName = 'proto.wippersnapper.pwm.v1.PWMAttachResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMDetachRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMDetachRequest.displayName = 'proto.wippersnapper.pwm.v1.PWMDetachRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.displayName = 'proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.displayName = 'proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.displayName = 'proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMAttachRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    frequency: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resolution: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachRequest}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMAttachRequest;
  return proto.wippersnapper.pwm.v1.PWMAttachRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachRequest}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrequency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMAttachRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getResolution();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string pin = 1;
 * @return {string}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.setPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 frequency = 2;
 * @return {number}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 resolution = 3;
 * @return {number}
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.getResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMAttachRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMAttachResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    didAttach: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachResponse}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMAttachResponse;
  return proto.wippersnapper.pwm.v1.PWMAttachResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachResponse}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDidAttach(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMAttachResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMAttachResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDidAttach();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string pin = 1;
 * @return {string}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachResponse} returns this
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.setPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool did_attach = 2;
 * @return {boolean}
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.getDidAttach = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.pwm.v1.PWMAttachResponse} returns this
 */
proto.wippersnapper.pwm.v1.PWMAttachResponse.prototype.setDidAttach = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMDetachRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMDetachRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMDetachRequest}
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMDetachRequest;
  return proto.wippersnapper.pwm.v1.PWMDetachRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMDetachRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMDetachRequest}
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMDetachRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMDetachRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pin = 1;
 * @return {string}
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pwm.v1.PWMDetachRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMDetachRequest.prototype.setPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dutyCycle: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest;
  return proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDutyCycle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDutyCycle();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string pin = 1;
 * @return {string}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.setPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 duty_cycle = 2;
 * @return {number}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.getDutyCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.prototype.setDutyCycle = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    writeDutyCycleReqList: jspb.Message.toObjectList(msg.getWriteDutyCycleReqList(),
    proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest;
  return proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest;
      reader.readMessage(value,proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.deserializeBinaryFromReader);
      msg.addWriteDutyCycleReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWriteDutyCycleReqList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PWMWriteDutyCycleRequest write_duty_cycle_req = 1;
 * @return {!Array<!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest>}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.getWriteDutyCycleReqList = function() {
  return /** @type{!Array<!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest>} value
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest} returns this
*/
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.setWriteDutyCycleReqList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.addWriteDutyCycleReq = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.pwm.v1.PWMWriteDutyCycleRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMWriteDutyCycleMultiRequest.prototype.clearWriteDutyCycleReqList = function() {
  return this.setWriteDutyCycleReqList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    frequency: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest;
  return proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string pin = 1;
 * @return {string}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.setPin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 frequency = 2;
 * @return {number}
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest} returns this
 */
proto.wippersnapper.pwm.v1.PWMWriteFrequencyRequest.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


export default proto.wippersnapper.pwm.v1
