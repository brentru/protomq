// source: wippersnapper/pin/v1/pin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb from 'google-protobuf'
var goog = jspb;
var global = Function('return this')();

import nanopb_nanopb_pb from './nanopb_pb.js'
goog.object.extend(proto, nanopb_nanopb_pb);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePWMPinRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePWMPinRequests', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequest', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigurePinRequests', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.ConfigureReferenceVoltage', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.Mode', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.PWMPinEvent', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.PWMPinEvents', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.PinEvent', null, global);
goog.exportSymbol('proto.wippersnapper.pin.v1.PinEvents', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.pin.v1.ConfigurePinRequests.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.pin.v1.ConfigurePinRequests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.ConfigurePinRequests.displayName = 'proto.wippersnapper.pin.v1.ConfigurePinRequests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pin.v1.ConfigurePinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.ConfigurePinRequest.displayName = 'proto.wippersnapper.pin.v1.ConfigurePinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.PinEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pin.v1.PinEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.PinEvent.displayName = 'proto.wippersnapper.pin.v1.PinEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pin.v1.ConfigureReferenceVoltage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.displayName = 'proto.wippersnapper.pin.v1.ConfigureReferenceVoltage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.PinEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.pin.v1.PinEvents.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.pin.v1.PinEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.PinEvents.displayName = 'proto.wippersnapper.pin.v1.PinEvents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pin.v1.ConfigurePWMPinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.displayName = 'proto.wippersnapper.pin.v1.ConfigurePWMPinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.pin.v1.ConfigurePWMPinRequests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.displayName = 'proto.wippersnapper.pin.v1.ConfigurePWMPinRequests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.PWMPinEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.pin.v1.PWMPinEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.PWMPinEvent.displayName = 'proto.wippersnapper.pin.v1.PWMPinEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.pin.v1.PWMPinEvents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.pin.v1.PWMPinEvents.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.pin.v1.PWMPinEvents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.pin.v1.PWMPinEvents.displayName = 'proto.wippersnapper.pin.v1.PWMPinEvents';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.ConfigurePinRequests.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequests} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.wippersnapper.pin.v1.ConfigurePinRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequests}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.ConfigurePinRequests;
  return proto.wippersnapper.pin.v1.ConfigurePinRequests.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequests}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.pin.v1.ConfigurePinRequest;
      reader.readMessage(value,proto.wippersnapper.pin.v1.ConfigurePinRequest.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.ConfigurePinRequests.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.pin.v1.ConfigurePinRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigurePinRequest list = 1;
 * @return {!Array<!proto.wippersnapper.pin.v1.ConfigurePinRequest>}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.getListList = function() {
  return /** @type{!Array<!proto.wippersnapper.pin.v1.ConfigurePinRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.pin.v1.ConfigurePinRequest, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.pin.v1.ConfigurePinRequest>} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequests} returns this
*/
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.pin.v1.ConfigurePinRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequests} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequests.prototype.clearListList = function() {
  return this.setListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.ConfigurePinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pinName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pull: jspb.Message.getFieldWithDefault(msg, 4, 0),
    period: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    requestType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    aref: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    analogReadMode: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.ConfigurePinRequest;
  return proto.wippersnapper.pin.v1.ConfigurePinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinName(value);
      break;
    case 2:
      var value = /** @type {!proto.wippersnapper.pin.v1.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 3:
      var value = /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 4:
      var value = /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull} */ (reader.readEnum());
      msg.setPull(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPeriod(value);
      break;
    case 6:
      var value = /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAref(value);
      break;
    case 8:
      var value = /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode} */ (reader.readEnum());
      msg.setAnalogReadMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.ConfigurePinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPinName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPull();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getPeriod();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getAref();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getAnalogReadMode();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction = {
  DIRECTION_UNSPECIFIED: 0,
  DIRECTION_INPUT: 1,
  DIRECTION_OUTPUT: 2
};

/**
 * @enum {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull = {
  PULL_UNSPECIFIED: 0,
  PULL_UP: 1,
  PULL_DOWN: 2
};

/**
 * @enum {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType = {
  REQUEST_TYPE_UNSPECIFIED: 0,
  REQUEST_TYPE_CREATE: 1,
  REQUEST_TYPE_UPDATE: 2,
  REQUEST_TYPE_DELETE: 3
};

/**
 * @enum {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode = {
  ANALOG_READ_MODE_UNSPECIFIED: 0,
  ANALOG_READ_MODE_PIN_VALUE: 1,
  ANALOG_READ_MODE_PIN_VOLTAGE: 2
};

/**
 * optional string pin_name = 1;
 * @return {string}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getPinName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setPinName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Mode mode = 2;
 * @return {!proto.wippersnapper.pin.v1.Mode}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getMode = function() {
  return /** @type {!proto.wippersnapper.pin.v1.Mode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.Mode} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Direction direction = 3;
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getDirection = function() {
  return /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Direction} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Pull pull = 4;
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getPull = function() {
  return /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest.Pull} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setPull = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional float period = 5;
 * @return {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setPeriod = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional RequestType request_type = 6;
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getRequestType = function() {
  return /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest.RequestType} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional float aref = 7;
 * @return {number}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getAref = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setAref = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional AnalogReadMode analog_read_mode = 8;
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode}
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.getAnalogReadMode = function() {
  return /** @type {!proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePinRequest.AnalogReadMode} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePinRequest.prototype.setAnalogReadMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.PinEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.PinEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PinEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    pinName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pinValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pinValueVolts: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.PinEvent}
 */
proto.wippersnapper.pin.v1.PinEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.PinEvent;
  return proto.wippersnapper.pin.v1.PinEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.PinEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.PinEvent}
 */
proto.wippersnapper.pin.v1.PinEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinValue(value);
      break;
    case 3:
      var value = /** @type {!proto.wippersnapper.pin.v1.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPinValueVolts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.PinEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.PinEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PinEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPinName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPinValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPinValueVolts();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string pin_name = 1;
 * @return {string}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.getPinName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pin.v1.PinEvent} returns this
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.setPinName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pin_value = 2;
 * @return {string}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.getPinValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pin.v1.PinEvent} returns this
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.setPinValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Mode mode = 3;
 * @return {!proto.wippersnapper.pin.v1.Mode}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.getMode = function() {
  return /** @type {!proto.wippersnapper.pin.v1.Mode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.wippersnapper.pin.v1.Mode} value
 * @return {!proto.wippersnapper.pin.v1.PinEvent} returns this
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional float pin_value_volts = 4;
 * @return {number}
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.getPinValueVolts = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.PinEvent} returns this
 */
proto.wippersnapper.pin.v1.PinEvent.prototype.setPinValueVolts = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.toObject = function(includeInstance, msg) {
  var f, obj = {
    referenceVoltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage}
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.ConfigureReferenceVoltage;
  return proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage}
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReferenceVoltage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReferenceVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float reference_voltage = 1;
 * @return {number}
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.prototype.getReferenceVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.ConfigureReferenceVoltage} returns this
 */
proto.wippersnapper.pin.v1.ConfigureReferenceVoltage.prototype.setReferenceVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.pin.v1.PinEvents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.PinEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.PinEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.PinEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PinEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.wippersnapper.pin.v1.PinEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.PinEvents}
 */
proto.wippersnapper.pin.v1.PinEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.PinEvents;
  return proto.wippersnapper.pin.v1.PinEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.PinEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.PinEvents}
 */
proto.wippersnapper.pin.v1.PinEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.pin.v1.PinEvent;
      reader.readMessage(value,proto.wippersnapper.pin.v1.PinEvent.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.PinEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.PinEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.PinEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PinEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.pin.v1.PinEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PinEvent list = 1;
 * @return {!Array<!proto.wippersnapper.pin.v1.PinEvent>}
 */
proto.wippersnapper.pin.v1.PinEvents.prototype.getListList = function() {
  return /** @type{!Array<!proto.wippersnapper.pin.v1.PinEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.pin.v1.PinEvent, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.pin.v1.PinEvent>} value
 * @return {!proto.wippersnapper.pin.v1.PinEvents} returns this
*/
proto.wippersnapper.pin.v1.PinEvents.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.pin.v1.PinEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.pin.v1.PinEvent}
 */
proto.wippersnapper.pin.v1.PinEvents.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.pin.v1.PinEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.pin.v1.PinEvents} returns this
 */
proto.wippersnapper.pin.v1.PinEvents.prototype.clearListList = function() {
  return this.setListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pinName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dutyCycle: jspb.Message.getFieldWithDefault(msg, 2, 0),
    frequency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    variableFrequency: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.ConfigurePWMPinRequest;
  return proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDutyCycle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrequency(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVariableFrequency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPinName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDutyCycle();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVariableFrequency();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string pin_name = 1;
 * @return {string}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.getPinName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.setPinName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 duty_cycle = 2;
 * @return {number}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.getDutyCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.setDutyCycle = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 frequency = 3;
 * @return {number}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool variable_frequency = 4;
 * @return {boolean}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.getVariableFrequency = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.prototype.setVariableFrequency = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.ConfigurePWMPinRequests;
  return proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.pin.v1.ConfigurePWMPinRequest;
      reader.readMessage(value,proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.pin.v1.ConfigurePWMPinRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConfigurePWMPinRequest list = 1;
 * @return {!Array<!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest>}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.getListList = function() {
  return /** @type{!Array<!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.pin.v1.ConfigurePWMPinRequest, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest>} value
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests} returns this
*/
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequest}
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.pin.v1.ConfigurePWMPinRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.pin.v1.ConfigurePWMPinRequests} returns this
 */
proto.wippersnapper.pin.v1.ConfigurePWMPinRequests.prototype.clearListList = function() {
  return this.setListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.PWMPinEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.PWMPinEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PWMPinEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    dutyCycle: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvent}
 */
proto.wippersnapper.pin.v1.PWMPinEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.PWMPinEvent;
  return proto.wippersnapper.pin.v1.PWMPinEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvent}
 */
proto.wippersnapper.pin.v1.PWMPinEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDutyCycle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.PWMPinEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.PWMPinEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PWMPinEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDutyCycle();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 duty_cycle = 2;
 * @return {number}
 */
proto.wippersnapper.pin.v1.PWMPinEvent.prototype.getDutyCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvent} returns this
 */
proto.wippersnapper.pin.v1.PWMPinEvent.prototype.setDutyCycle = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.pin.v1.PWMPinEvents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.pin.v1.PWMPinEvents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PWMPinEvents.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.wippersnapper.pin.v1.PWMPinEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvents}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.pin.v1.PWMPinEvents;
  return proto.wippersnapper.pin.v1.PWMPinEvents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvents}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.pin.v1.PWMPinEvent;
      reader.readMessage(value,proto.wippersnapper.pin.v1.PWMPinEvent.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.pin.v1.PWMPinEvents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.pin.v1.PWMPinEvents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.pin.v1.PWMPinEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PWMPinEvent list = 1;
 * @return {!Array<!proto.wippersnapper.pin.v1.PWMPinEvent>}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.getListList = function() {
  return /** @type{!Array<!proto.wippersnapper.pin.v1.PWMPinEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.pin.v1.PWMPinEvent, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.pin.v1.PWMPinEvent>} value
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvents} returns this
*/
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.pin.v1.PWMPinEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvent}
 */
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.pin.v1.PWMPinEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.pin.v1.PWMPinEvents} returns this
 */
proto.wippersnapper.pin.v1.PWMPinEvents.prototype.clearListList = function() {
  return this.setListList([]);
};


/**
 * @enum {number}
 */
proto.wippersnapper.pin.v1.Mode = {
  MODE_UNSPECIFIED: 0,
  MODE_ANALOG: 1,
  MODE_DIGITAL: 2
};

export default proto.wippersnapper.pin.v1
