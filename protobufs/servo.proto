// SPDX-FileCopyrightText: 2022 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.servo.v1;
// import "nanopb\.proto";

/**
* ServoAttachRequest represents a request to attach a servo to a pin.
*/
message ServoAttachRequest {
  string servo_pin      = 1 [(nanopb).max_size = 6]; /** The name of pin to attach a servo to. */
  int32 servo_freq      = 2; /** The overall PWM frequency, default sent by Adafruit IO is 50Hz. **/
  int32 min_pulse_width = 3; /** The minimum pulse length in uS. Default sent by Adafruit IO is 500uS. **/
  int32 max_pulse_width = 4; /** The maximum pulse length in uS. Default sent by Adafruit IO is 2500uS. **/
}

/**
* ServoAttachResponse represents the result of attaching a servo to a pin.
*/
message ServoAttachResponse {
  bool attach_success = 1; /** True if a servo was attached successfully, False otherwise. **/
  string servo_pin    = 2 [(nanopb).max_size = 6]; /** The name of pin we're responding about. */
}

/**
* ServoDetachRequest represents a request to detach a servo from a pin and de-initialize the pin for other uses.
*/
message ServoDetachRequest {
  string servo_pin = 1 [(nanopb).max_size = 5]; /** The name of pin to use as a servo pin. */
}

/**
* ServoWriteReq represents a message to write the servo's position.
*
* NOTE: Position is sent from Adafruit IO as a pulse width in uS between 500uS
* and 2500uS. The client application must convert pulse width to duty cycle w/fixed
* freq of 50Hz prior to writing to the servo pin.
*/
message ServoWriteRequest {
  string servo_pin   = 1 [(nanopb).max_size = 5]; /** The name of pin we're addressing. */
  int32  pulse_width = 2; /** The pulse width to write to the servo, in uS **/
}
