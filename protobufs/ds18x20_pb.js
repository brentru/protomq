// source: wippersnapper/ds18x20/v1/ds18x20.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb from 'google-protobuf'
var goog = jspb;
var global = Function('return this')();

import nanopb_nanopb_pb from './nanopb_pb.js'
goog.object.extend(proto, nanopb_nanopb_pb);
import wippersnapper_i2c_v1_i2c_pb from './i2c_pb.js'
goog.object.extend(proto, wippersnapper_i2c_v1_i2c_pb);
goog.exportSymbol('proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest', null, global);
goog.exportSymbol('proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent', null, global);
goog.exportSymbol('proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest', null, global);
goog.exportSymbol('proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.displayName = 'proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.displayName = 'proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.displayName = 'proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.displayName = 'proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    onewirePin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sensorResolution: jspb.Message.getFieldWithDefault(msg, 2, 0),
    i2cDevicePropertiesList: jspb.Message.toObjectList(msg.getI2cDevicePropertiesList(),
    wippersnapper_i2c_v1_i2c_pb.I2CDeviceSensorProperties.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest;
  return proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnewirePin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSensorResolution(value);
      break;
    case 3:
      var value = new wippersnapper_i2c_v1_i2c_pb.I2CDeviceSensorProperties;
      reader.readMessage(value,wippersnapper_i2c_v1_i2c_pb.I2CDeviceSensorProperties.deserializeBinaryFromReader);
      msg.addI2cDeviceProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnewirePin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSensorResolution();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getI2cDevicePropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      wippersnapper_i2c_v1_i2c_pb.I2CDeviceSensorProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional string onewire_pin = 1;
 * @return {string}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.getOnewirePin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.setOnewirePin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 sensor_resolution = 2;
 * @return {number}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.getSensorResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.setSensorResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated wippersnapper.i2c.v1.I2CDeviceSensorProperties i2c_device_properties = 3;
 * @return {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.getI2cDevicePropertiesList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, wippersnapper_i2c_v1_i2c_pb.I2CDeviceSensorProperties, 3));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} returns this
*/
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.setI2cDevicePropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.addI2cDeviceProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitRequest.prototype.clearI2cDevicePropertiesList = function() {
  return this.setI2cDevicePropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isInitialized: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    onewirePin: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse;
  return proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInitialized(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnewirePin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsInitialized();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getOnewirePin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool is_initialized = 1;
 * @return {boolean}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.getIsInitialized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.setIsInitialized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string onewire_pin = 2;
 * @return {string}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.getOnewirePin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20InitResponse.prototype.setOnewirePin = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    onewirePin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest;
  return proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnewirePin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnewirePin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string onewire_pin = 1;
 * @return {string}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.prototype.getOnewirePin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeInitRequest.prototype.setOnewirePin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    onewirePin: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sensorEventList: jspb.Message.toObjectList(msg.getSensorEventList(),
    wippersnapper_i2c_v1_i2c_pb.SensorEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent;
  return proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOnewirePin(value);
      break;
    case 2:
      var value = new wippersnapper_i2c_v1_i2c_pb.SensorEvent;
      reader.readMessage(value,wippersnapper_i2c_v1_i2c_pb.SensorEvent.deserializeBinaryFromReader);
      msg.addSensorEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnewirePin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSensorEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      wippersnapper_i2c_v1_i2c_pb.SensorEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional string onewire_pin = 1;
 * @return {string}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.getOnewirePin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.setOnewirePin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated wippersnapper.i2c.v1.SensorEvent sensor_event = 2;
 * @return {!Array<!proto.wippersnapper.i2c.v1.SensorEvent>}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.getSensorEventList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.SensorEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, wippersnapper_i2c_v1_i2c_pb.SensorEvent, 2));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.SensorEvent>} value
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} returns this
*/
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.setSensorEventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.SensorEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent}
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.addSensorEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wippersnapper.i2c.v1.SensorEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent} returns this
 */
proto.wippersnapper.ds18x20.v1.Ds18x20DeviceEvent.prototype.clearSensorEventList = function() {
  return this.setSensorEventList([]);
};


export default proto.wippersnapper.ds18x20.v1
