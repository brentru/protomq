// source: wippersnapper/i2c/v1/i2c.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

import jspb from 'google-protobuf'
var goog = jspb;
var global = Function('return this')();

import nanopb_nanopb_pb from './nanopb_pb.js'
goog.object.extend(proto, nanopb_nanopb_pb);
goog.exportSymbol('proto.wippersnapper.i2c.v1.BusResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CBusInitRequest', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CBusInitResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CBusScanRequest', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CBusScanResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CBusSetFrequency', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceEvent', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceInitRequest', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceInitRequests', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceInitResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.SensorEvent', null, global);
goog.exportSymbol('proto.wippersnapper.i2c.v1.SensorType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CBusInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CBusInitRequest.displayName = 'proto.wippersnapper.i2c.v1.I2CBusInitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CBusInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CBusInitResponse.displayName = 'proto.wippersnapper.i2c.v1.I2CBusInitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CBusSetFrequency, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CBusSetFrequency.displayName = 'proto.wippersnapper.i2c.v1.I2CBusSetFrequency';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CBusScanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CBusScanRequest.displayName = 'proto.wippersnapper.i2c.v1.I2CBusScanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.i2c.v1.I2CBusScanResponse.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CBusScanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CBusScanResponse.displayName = 'proto.wippersnapper.i2c.v1.I2CBusScanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceInitRequests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceInitRequests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceInitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceInitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceInitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.SensorEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.SensorEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.SensorEvent.displayName = 'proto.wippersnapper.i2c.v1.SensorEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wippersnapper.i2c.v1.I2CDeviceEvent.repeatedFields_, null);
};
goog.inherits(proto.wippersnapper.i2c.v1.I2CDeviceEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wippersnapper.i2c.v1.I2CDeviceEvent.displayName = 'proto.wippersnapper.i2c.v1.I2CDeviceEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CBusInitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cPinScl: jspb.Message.getFieldWithDefault(msg, 1, 0),
    i2cPinSda: jspb.Message.getFieldWithDefault(msg, 2, 0),
    i2cFrequency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i2cPortNumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CBusInitRequest;
  return proto.wippersnapper.i2c.v1.I2CBusInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPinScl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPinSda(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cFrequency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPortNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CBusInitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cPinScl();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getI2cPinSda();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getI2cFrequency();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getI2cPortNumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 i2c_pin_scl = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.getI2cPinScl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.setI2cPinScl = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 i2c_pin_sda = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.getI2cPinSda = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.setI2cPinSda = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 i2c_frequency = 3;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.getI2cFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.setI2cFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 i2c_port_number = 4;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.getI2cPortNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitRequest.prototype.setI2cPortNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CBusInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isInitialized: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    busResponse: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CBusInitResponse;
  return proto.wippersnapper.i2c.v1.I2CBusInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInitialized(value);
      break;
    case 2:
      var value = /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (reader.readEnum());
      msg.setBusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CBusInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsInitialized();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getBusResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bool is_initialized = 1;
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.getIsInitialized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.setIsInitialized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional BusResponse bus_response = 2;
 * @return {!proto.wippersnapper.i2c.v1.BusResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.getBusResponse = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.BusResponse} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusInitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusInitResponse.prototype.setBusResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CBusSetFrequency.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: jspb.Message.getFieldWithDefault(msg, 1, 0),
    busId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CBusSetFrequency;
  return proto.wippersnapper.i2c.v1.I2CBusSetFrequency.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBusId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CBusSetFrequency.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBusId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional uint32 frequency = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 bus_id = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.getBusId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusSetFrequency} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusSetFrequency.prototype.setBusId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CBusScanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cPortNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    busInitRequest: (f = msg.getBusInitRequest()) && proto.wippersnapper.i2c.v1.I2CBusInitRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanRequest}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CBusScanRequest;
  return proto.wippersnapper.i2c.v1.I2CBusScanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanRequest}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPortNumber(value);
      break;
    case 2:
      var value = new proto.wippersnapper.i2c.v1.I2CBusInitRequest;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.I2CBusInitRequest.deserializeBinaryFromReader);
      msg.setBusInitRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CBusScanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cPortNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBusInitRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.wippersnapper.i2c.v1.I2CBusInitRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 i2c_port_number = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.getI2cPortNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.setI2cPortNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional I2CBusInitRequest bus_init_request = 2;
 * @return {?proto.wippersnapper.i2c.v1.I2CBusInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.getBusInitRequest = function() {
  return /** @type{?proto.wippersnapper.i2c.v1.I2CBusInitRequest} */ (
    jspb.Message.getWrapperField(this, proto.wippersnapper.i2c.v1.I2CBusInitRequest, 2));
};


/**
 * @param {?proto.wippersnapper.i2c.v1.I2CBusInitRequest|undefined} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} returns this
*/
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.setBusInitRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.clearBusInitRequest = function() {
  return this.setBusInitRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CBusScanRequest.prototype.hasBusInitRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CBusScanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressesFoundList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    busResponse: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CBusScanResponse;
  return proto.wippersnapper.i2c.v1.I2CBusScanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAddressesFoundList(value);
      break;
    case 2:
      var value = /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (reader.readEnum());
      msg.setBusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CBusScanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressesFoundList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getBusResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * repeated uint32 addresses_found = 1;
 * @return {!Array<number>}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.getAddressesFoundList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.setAddressesFoundList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.addAddressesFound = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.clearAddressesFoundList = function() {
  return this.setAddressesFoundList([]);
};


/**
 * optional BusResponse bus_response = 2;
 * @return {!proto.wippersnapper.i2c.v1.BusResponse}
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.getBusResponse = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.BusResponse} value
 * @return {!proto.wippersnapper.i2c.v1.I2CBusScanResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CBusScanResponse.prototype.setBusResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sensorPeriod: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties;
  return proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.wippersnapper.i2c.v1.SensorType} */ (reader.readEnum());
      msg.setSensorType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSensorPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSensorPeriod();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional SensorType sensor_type = 1;
 * @return {!proto.wippersnapper.i2c.v1.SensorType}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.getSensorType = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.SensorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.SensorType} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.setSensorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 sensor_period = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.getSensorPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.prototype.setSensorPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceInitRequests;
  return proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wippersnapper.i2c.v1.I2CDeviceInitRequest;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated I2CDeviceInitRequest list = 1;
 * @return {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest>}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.getListList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.i2c.v1.I2CDeviceInitRequest, 1));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest>} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests} returns this
*/
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wippersnapper.i2c.v1.I2CDeviceInitRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequests} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequests.prototype.clearListList = function() {
  return this.setListList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cPortNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    i2cBusInitReq: (f = msg.getI2cBusInitReq()) && proto.wippersnapper.i2c.v1.I2CBusInitRequest.toObject(includeInstance, f),
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 3, 0),
    i2cDeviceName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    i2cDevicePropertiesList: jspb.Message.toObjectList(msg.getI2cDevicePropertiesList(),
    proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceInitRequest;
  return proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPortNumber(value);
      break;
    case 2:
      var value = new proto.wippersnapper.i2c.v1.I2CBusInitRequest;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.I2CBusInitRequest.deserializeBinaryFromReader);
      msg.setI2cBusInitReq(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setI2cDeviceName(value);
      break;
    case 5:
      var value = new proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.deserializeBinaryFromReader);
      msg.addI2cDeviceProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cPortNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getI2cBusInitReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.wippersnapper.i2c.v1.I2CBusInitRequest.serializeBinaryToWriter
    );
  }
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getI2cDeviceName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getI2cDevicePropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 i2c_port_number = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.getI2cPortNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.setI2cPortNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional I2CBusInitRequest i2c_bus_init_req = 2;
 * @return {?proto.wippersnapper.i2c.v1.I2CBusInitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.getI2cBusInitReq = function() {
  return /** @type{?proto.wippersnapper.i2c.v1.I2CBusInitRequest} */ (
    jspb.Message.getWrapperField(this, proto.wippersnapper.i2c.v1.I2CBusInitRequest, 2));
};


/**
 * @param {?proto.wippersnapper.i2c.v1.I2CBusInitRequest|undefined} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
*/
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.setI2cBusInitReq = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.clearI2cBusInitReq = function() {
  return this.setI2cBusInitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.hasI2cBusInitReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 i2c_device_address = 3;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string i2c_device_name = 4;
 * @return {string}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.getI2cDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.setI2cDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated I2CDeviceSensorProperties i2c_device_properties = 5;
 * @return {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.getI2cDevicePropertiesList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, 5));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
*/
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.setI2cDevicePropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.addI2cDeviceProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitRequest.prototype.clearI2cDevicePropertiesList = function() {
  return this.setI2cDevicePropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 2, 0),
    busResponse: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceInitResponse;
  return proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (reader.readEnum());
      msg.setBusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBusResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool is_success = 1;
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.getIsSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.setIsSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 i2c_device_address = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BusResponse bus_response = 3;
 * @return {!proto.wippersnapper.i2c.v1.BusResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.getBusResponse = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.BusResponse} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceInitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceInitResponse.prototype.setBusResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cPortNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 2, 0),
    i2cDeviceName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    i2cDevicePropertiesList: jspb.Message.toObjectList(msg.getI2cDevicePropertiesList(),
    proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest;
  return proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPortNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setI2cDeviceName(value);
      break;
    case 4:
      var value = new proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.deserializeBinaryFromReader);
      msg.addI2cDeviceProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cPortNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getI2cDeviceName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getI2cDevicePropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 i2c_port_number = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.getI2cPortNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.setI2cPortNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 i2c_device_address = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string i2c_device_name = 3;
 * @return {string}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.getI2cDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.setI2cDeviceName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated I2CDeviceSensorProperties i2c_device_properties = 4;
 * @return {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.getI2cDevicePropertiesList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, 4));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties>} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} returns this
*/
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.setI2cDevicePropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.addI2cDeviceProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.wippersnapper.i2c.v1.I2CDeviceSensorProperties, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateRequest.prototype.clearI2cDevicePropertiesList = function() {
  return this.setI2cDevicePropertiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    busResponse: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse;
  return proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccess(value);
      break;
    case 3:
      var value = /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (reader.readEnum());
      msg.setBusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIsSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBusResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint32 i2c_device_address = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_success = 2;
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.getIsSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.setIsSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional BusResponse bus_response = 3;
 * @return {!proto.wippersnapper.i2c.v1.BusResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.getBusResponse = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.BusResponse} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceUpdateResponse.prototype.setBusResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    i2cPortNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest;
  return proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setI2cPortNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI2cPortNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional int32 i2c_port_number = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.getI2cPortNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.setI2cPortNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 i2c_device_address = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitRequest.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    isSuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    i2cDeviceAddress: jspb.Message.getFieldWithDefault(msg, 2, 0),
    busResponse: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse;
  return proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccess(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setI2cDeviceAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (reader.readEnum());
      msg.setBusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getI2cDeviceAddress();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBusResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bool is_success = 1;
 * @return {boolean}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.getIsSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.setIsSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 i2c_device_address = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.getI2cDeviceAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.setI2cDeviceAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BusResponse bus_response = 3;
 * @return {!proto.wippersnapper.i2c.v1.BusResponse}
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.getBusResponse = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.BusResponse} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.BusResponse} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceDeinitResponse.prototype.setBusResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.SensorEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.SensorEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.SensorEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent}
 */
proto.wippersnapper.i2c.v1.SensorEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.SensorEvent;
  return proto.wippersnapper.i2c.v1.SensorEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.SensorEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent}
 */
proto.wippersnapper.i2c.v1.SensorEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.wippersnapper.i2c.v1.SensorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.SensorEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.SensorEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.SensorEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional SensorType type = 1;
 * @return {!proto.wippersnapper.i2c.v1.SensorType}
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.getType = function() {
  return /** @type {!proto.wippersnapper.i2c.v1.SensorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.wippersnapper.i2c.v1.SensorType} value
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent} returns this
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent} returns this
 */
proto.wippersnapper.i2c.v1.SensorEvent.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wippersnapper.i2c.v1.I2CDeviceEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensorAddress: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sensorEventList: jspb.Message.toObjectList(msg.getSensorEventList(),
    proto.wippersnapper.i2c.v1.SensorEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceEvent}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wippersnapper.i2c.v1.I2CDeviceEvent;
  return proto.wippersnapper.i2c.v1.I2CDeviceEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceEvent}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSensorAddress(value);
      break;
    case 2:
      var value = new proto.wippersnapper.i2c.v1.SensorEvent;
      reader.readMessage(value,proto.wippersnapper.i2c.v1.SensorEvent.deserializeBinaryFromReader);
      msg.addSensorEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wippersnapper.i2c.v1.I2CDeviceEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensorAddress();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSensorEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wippersnapper.i2c.v1.SensorEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 sensor_address = 1;
 * @return {number}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.getSensorAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.setSensorAddress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SensorEvent sensor_event = 2;
 * @return {!Array<!proto.wippersnapper.i2c.v1.SensorEvent>}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.getSensorEventList = function() {
  return /** @type{!Array<!proto.wippersnapper.i2c.v1.SensorEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wippersnapper.i2c.v1.SensorEvent, 2));
};


/**
 * @param {!Array<!proto.wippersnapper.i2c.v1.SensorEvent>} value
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} returns this
*/
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.setSensorEventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wippersnapper.i2c.v1.SensorEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wippersnapper.i2c.v1.SensorEvent}
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.addSensorEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wippersnapper.i2c.v1.SensorEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wippersnapper.i2c.v1.I2CDeviceEvent} returns this
 */
proto.wippersnapper.i2c.v1.I2CDeviceEvent.prototype.clearSensorEventList = function() {
  return this.setSensorEventList([]);
};


/**
 * @enum {number}
 */
proto.wippersnapper.i2c.v1.BusResponse = {
  BUS_RESPONSE_UNSPECIFIED: 0,
  BUS_RESPONSE_SUCCESS: 1,
  BUS_RESPONSE_ERROR_HANG: 2,
  BUS_RESPONSE_ERROR_PULLUPS: 3,
  BUS_RESPONSE_ERROR_WIRING: 4,
  BUS_RESPONSE_UNSUPPORTED_SENSOR: 5,
  BUS_RESPONSE_DEVICE_INIT_FAIL: 6,
  BUS_RESPONSE_DEVICE_DEINIT_FAIL: 7
};

/**
 * @enum {number}
 */
proto.wippersnapper.i2c.v1.SensorType = {
  SENSOR_TYPE_UNSPECIFIED: 0,
  SENSOR_TYPE_ACCELEROMETER: 1,
  SENSOR_TYPE_MAGNETIC_FIELD: 2,
  SENSOR_TYPE_ORIENTATION: 3,
  SENSOR_TYPE_GYROSCOPE: 4,
  SENSOR_TYPE_LIGHT: 5,
  SENSOR_TYPE_PRESSURE: 6,
  SENSOR_TYPE_PROXIMITY: 8,
  SENSOR_TYPE_GRAVITY: 9,
  SENSOR_TYPE_LINEAR_ACCELERATION: 10,
  SENSOR_TYPE_ROTATION_VECTOR: 11,
  SENSOR_TYPE_RELATIVE_HUMIDITY: 12,
  SENSOR_TYPE_AMBIENT_TEMPERATURE: 13,
  SENSOR_TYPE_OBJECT_TEMPERATURE: 14,
  SENSOR_TYPE_VOLTAGE: 15,
  SENSOR_TYPE_CURRENT: 16,
  SENSOR_TYPE_COLOR: 17,
  SENSOR_TYPE_RAW: 18,
  SENSOR_TYPE_PM10_STD: 19,
  SENSOR_TYPE_PM25_STD: 20,
  SENSOR_TYPE_PM100_STD: 21,
  SENSOR_TYPE_PM10_ENV: 22,
  SENSOR_TYPE_PM25_ENV: 23,
  SENSOR_TYPE_PM100_ENV: 24,
  SENSOR_TYPE_CO2: 25,
  SENSOR_TYPE_GAS_RESISTANCE: 26,
  SENSOR_TYPE_ALTITUDE: 27,
  SENSOR_TYPE_LUX: 28,
  SENSOR_TYPE_ECO2: 29,
  SENSOR_TYPE_UNITLESS_PERCENT: 30,
  SENSOR_TYPE_AMBIENT_TEMPERATURE_FAHRENHEIT: 31,
  SENSOR_TYPE_OBJECT_TEMPERATURE_FAHRENHEIT: 32
};

export default proto.wippersnapper.i2c.v1
